---
- Title: "Startup Pitch Advancement" 
- Difficulty: easy
- Bloom Taxonomy: "Apply"
- Subjects: "problem-solving"
- Topics: ["sample-topic"]
- Sub Topics: ["sample-subtopic"]
- Tags: ["practice-question"]
- Company: # Keep it empty
---

### Problem Statement
An Indian startup incubator is conducting a national pitch competition.

- `n` startups present their ideas and receive scores from the judges.
- Only startups with a **positive score** **and** a score **at least as high as the k-th place score** advance to the next round.

Given the scores (sorted from highest to lowest), determine how many startups will move to the next stage.

### Input Format
The first line contains two integers `n` and `k`, where `n` is the number of startups and `k` is the position threshold.
The second line contains `n` integers representing the scores of the startups (sorted from highest to lowest).

### Output Format
A single integer representing the number of startups that advance to the next round.

### Constraints
- 1 ≤ k ≤ n ≤ 50
- 0 ≤ score ≤ 100

---

**Test Case 1**

Input:
```
8 5
10 9 8 7 7 7 5 5
```

Output:
```
6
```

Explanation:
```
The k-th (5th) place score is 7. Startups with scores ≥ 7 and > 0 are: 10, 9, 8, 7, 7, 7. That's 6 startups.
```

**Test Case 2**

Input:
```
4 2
0 0 0 0
```

Output:
```
0
```

Explanation:
```
The k-th (2nd) place score is 0. No startup has a positive score, so 0 startups advance.
```

**Test Case 3**

Input:
```
3 3
5 4 3
```

Output:
```
3
```

Explanation:
```
The k-th (3rd) place score is 3. Startups with scores ≥ 3 and > 0 are: 5, 4, 3. That's 3 startups.
```

**Test Case 4**

Input:
```
6 4
12 11 10 0 0 0
```

Output:
```
3
```

Explanation:
```
The k-th (4th) place score is 0. Startups with scores ≥ 0 and > 0 are: 12, 11, 10. That's 3 startups.
```

**Test Case 5**

Input:
```
5 1
8 7 6 5 4
```

Output:
```
1
```

Explanation:
```
The k-th (1st) place score is 8. Startups with scores ≥ 8 and > 0 are: only the score 8. That's 1 startup.
```

**Test Case 6**

Input:
```
1 1
5
```

Output:
```
1
```

Explanation:
```
The k-th (1st) place score is 5. The startup with score 5 is ≥ 5 and > 0, so 1 startup advances.
```

**Test Case 7**

Input:
```
7 3
15 12 10 10 8 6 3
```

Output:
```
4
```

Explanation:
```
The k-th (3rd) place score is 10. Startups with scores ≥ 10 and > 0 are: 15, 12, 10, 10. That's 4 startups.
```

---

## Python Solution

```python
def compute(n, k, scores):
    # Get the k-th place score (k-1 because of 0-based indexing)
    kth_score = scores[k - 1]
    
    # Count startups with positive score AND score >= k-th place score
    count = 0
    for score in scores:
        if score > 0 and score >= kth_score:
            count += 1
    
    return count

n, k = map(int, input().split())
scores = list(map(int, input().split()))
result = compute(n, k, scores)
print(result)
```

## Java Solution

```java
import java.util.*;

public class Main {
    public static int compute(int n, int k, int[] scores) {
        // Get the k-th place score (k-1 because of 0-based indexing)
        int kthScore = scores[k - 1];
        
        // Count startups with positive score AND score >= k-th place score
        int count = 0;
        for (int score : scores) {
            if (score > 0 && score >= kthScore) {
                count++;
            }
        }
        
        return count;
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        
        int[] scores = new int[n];
        for (int i = 0; i < n; i++) {
            scores[i] = sc.nextInt();
        }
        
        System.out.println(compute(n, k, scores));
        sc.close();
    }
}
```

## C++ Solution

```cpp
#include <iostream>
#include <vector>
using namespace std;

int compute(int n, int k, vector<int>& scores) {
    // Get the k-th place score (k-1 because of 0-based indexing)
    int kthScore = scores[k - 1];
    
    // Count startups with positive score AND score >= k-th place score
    int count = 0;
    for (int score : scores) {
        if (score > 0 && score >= kthScore) {
            count++;
        }
    }
    
    return count;
}

int main() {
    int n, k;
    cin >> n >> k;
    
    vector<int> scores(n);
    for (int i = 0; i < n; i++) {
        cin >> scores[i];
    }
    
    cout << compute(n, k, scores) << endl;
    return 0;
}
```
