---
- Title: "Breaking News Battle"
- Difficulty: easy
- Bloom Taxonomy: "Apply"
- Subjects: "problem-solving"
- Topics: ["sample-topic"]
- Sub Topics: ["sample-subtopic"]
- Tags: ["practice-question"]
- Company: # Keep it empty
---
### Problem Statement
Two rival news agencies, **AlphaNews** and **DailyTimes**, are competing to be the fastest in publishing breaking news stories.

They cover the same events, and for each event, it's recorded which agency published the story first. None of the events ended in a tie — one of the agencies always broke the story first.

You are given a log of `n` events. Each event is represented as either:
* `'A'` if **AlphaNews** broke the story first, or
* `'D'` if **DailyTimes** broke the story first.

Your task is to determine which agency broke more stories first.

### Input Format
* The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of events.
* The second line contains a string `s` of length `n`, consisting only of characters `'A'` and `'D'`.

### Output Format
* Print **"AlphaNews"** if AlphaNews broke more stories.
* Print **"DailyTimes"** if DailyTimes broke more stories.
* Print **"Equal Coverage"** if both broke the same number of stories.

### Constraints
- 1 ≤ n ≤ 100,000
- String contains only 'A' and 'D'

---
**Test Case 1**
Input:
```
5
AADDA
```
Output:
```
AlphaNews
```
Explanation:
```
Events log: AADDA
AlphaNews (A): positions 0, 1, 4 → count = 3 stories
DailyTimes (D): positions 2, 3 → count = 2 stories
Since AlphaNews > DailyTimes (3 > 2): "AlphaNews"
```

**Test Case 2**
Input:
```
6
DDAADD
```
Output:
```
DailyTimes
```
Explanation:
```
Events log: DDAADD
AlphaNews (A): positions 2, 3 → count = 2 stories
DailyTimes (D): positions 0, 1, 4, 5 → count = 4 stories
Since DailyTimes > AlphaNews (4 > 2): "DailyTimes"
```

**Test Case 3**
Input:
```
4
ADAD
```
Output:
```
Equal Coverage
```
Explanation:
```
Events log: ADAD
AlphaNews (A): positions 0, 2 → count = 2 stories
DailyTimes (D): positions 1, 3 → count = 2 stories
Since AlphaNews = DailyTimes (2 = 2): "Equal Coverage"
```

**Test Case 4**
Input:
```
1
A
```
Output:
```
AlphaNews
```
Explanation:
```
Events log: A
AlphaNews (A): position 0 → count = 1 story
DailyTimes (D): none → count = 0 stories
Since AlphaNews > DailyTimes (1 > 0): "AlphaNews"
```

**Test Case 5**
Input:
```
7
DDDAAAA
```
Output:
```
AlphaNews
```
Explanation:
```
Events log: DDDAAAA
AlphaNews (A): positions 3, 4, 5, 6 → count = 4 stories
DailyTimes (D): positions 0, 1, 2 → count = 3 stories
Since AlphaNews > DailyTimes (4 > 3): "AlphaNews"
```

**Test Case 6**
Input:
```
8
DDDDAAAA
```
Output:
```
Equal Coverage
```
Explanation:
```
Events log: DDDDAAAA
AlphaNews (A): positions 4, 5, 6, 7 → count = 4 stories
DailyTimes (D): positions 0, 1, 2, 3 → count = 4 stories
Since AlphaNews = DailyTimes (4 = 4): "Equal Coverage"
```

**Test Case 7**
Input:
```
3
DDD
```
Output:
```
DailyTimes
```
Explanation:
```
Events log: DDD
AlphaNews (A): none → count = 0 stories
DailyTimes (D): positions 0, 1, 2 → count = 3 stories
Since DailyTimes > AlphaNews (3 > 0): "DailyTimes"
```

---
## Python Solution
```python
def compute(n, s):
    alpha_count = s.count('A')
    daily_count = s.count('D')
    
    if alpha_count > daily_count:
        return "AlphaNews"
    elif daily_count > alpha_count:
        return "DailyTimes"
    else:
        return "Equal Coverage"

n = int(input())
s = input().strip()
result = compute(n, s)
print(result)
```

## Java Solution
```java
import java.util.*;

public class Main {
    public static String compute(int n, String s) {
        int alphaCount = 0;
        int dailyCount = 0;
        
        for (char c : s.toCharArray()) {
            if (c == 'A') {
                alphaCount++;
            } else {
                dailyCount++;
            }
        }
        
        if (alphaCount > dailyCount) {
            return "AlphaNews";
        } else if (dailyCount > alphaCount) {
            return "DailyTimes";
        } else {
            return "Equal Coverage";
        }
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        System.out.println(compute(n, s));
        sc.close();
    }
}
```

## C++ Solution
```cpp
#include <iostream>
#include <string>
using namespace std;

string compute(int n, string s) {
    int alphaCount = 0;
    int dailyCount = 0;
    
    for (char c : s) {
        if (c == 'A') {
            alphaCount++;
        } else {
            dailyCount++;
        }
    }
    
    if (alphaCount > dailyCount) {
        return "AlphaNews";
    } else if (dailyCount > alphaCount) {
        return "DailyTimes";
    } else {
        return "Equal Coverage";
    }
}

int main() {
    int n;
    string s;
    cin >> n >> s;
    
    cout << compute(n, s) << endl;
    return 0;
}
```
